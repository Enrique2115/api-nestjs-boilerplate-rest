services:
  production:
    container_name: production
    env_file:
      - ./.env
    build:
      target: production
      context: .
      args:
        - PORT=${PORT:-3000}
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '512m'
        reservations:
          cpus: '0.25'
          memory: '256m'

  development:
    container_name: development
    restart: unless-stopped
    env_file:
      - ./.env
    build:
      target: dev
      context: .
      args:
        - PORT=${PORT:-3000}
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
      - 9229:9229
    volumes:
      # Volumen para el código fuente
      - ./src:/app/src
      # Volumen anónimo para node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - postgres
    environment:
      # Mejora la detección de cambios de archivos en Docker
      - CHOKIDAR_USEPOLLING=true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '512m'
        reservations:
          cpus: '0.25'
          memory: '256m'

  redis:
    container_name: redis-db
    image: redis:7.0.5-alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - redis:/data

  postgres:
    container_name: postgres-db
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 20s
      timeout: 10s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data

volumes:
  postgres:
  redis:
    driver: local
